<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>刷题入门指南</title>
    <link href="/posts/889217aa/"/>
    <url>/posts/889217aa/</url>
    
    <content type="html"><![CDATA[<h3 id="我们为什么要刷题？"><a href="#我们为什么要刷题？" class="headerlink" title="我们为什么要刷题？"></a>我们为什么要刷题？</h3><ul><li>提升个人的软件基础修养，会些数据结构和算法，代码写出来会好很多。</li><li>面试一定会问。我就没有见过面试不问数据结构和算法的。</li></ul><h3 id="刷题到底有没有用？"><a href="#刷题到底有没有用？" class="headerlink" title="刷题到底有没有用？"></a>刷题到底有没有用？</h3><p>我们大学的时候，学习的更多的是偏理论的。随便拿一个题目出来， 没有刷过题的基本上都是做不出来的，但是一看答案，哦原来如此。 其实这就是因为没有刷过题。 如果你高中的时候数学只学了一些概念，都不做题的话，就去高考，你觉得自己能考得好吗？ 这是不可能的。刷题可以让你学习的理论能够运用到具体的实战中去。</p><h3 id="那要到哪里去刷题呢？"><a href="#那要到哪里去刷题呢？" class="headerlink" title="那要到哪里去刷题呢？"></a>那要到哪里去刷题呢？</h3><p>推荐一个刷题网站：</p><ul><li><a href="https://leetcode-cn.com/">leetcode中国站</a></li><li><a href="https://leetcode.com/">leetcode国际站</a></li></ul><p>在 <code>leetcode中国站</code> 刷题，因为国内访问速度更快。</p><p>在 <code>leetcode国际站</code> 看题解，因为国外的题解质量更高，不过是英文的。</p><p>另外，不推荐传统的 OJ 平台，因为太难用了，对新手来说太难了，也不友好。</p><ul><li>只告诉你错了，却不告诉你哪个测试用例错了。</li><li>需要自己从终端读取数据作为输入，有的数据输入是很难处理的。</li><li>题目没有区分简单、中等、困难，不利于渐进式学习。很多时候， 对于我们做应用软件开发，会做简单的题目就够了，而困难的题目更多是竞赛才需要的。</li></ul><h3 id="要怎么正确的刷题？"><a href="#要怎么正确的刷题？" class="headerlink" title="要怎么正确的刷题？"></a>要怎么正确的刷题？</h3><p><strong>五遍刷题法</strong>：</p><ul><li>自己先思考 5 分钟，有想法自己先做一遍。没有想法就直接看题解，看懂之后做一遍。</li><li>没有想法看题解的话，要自己不看题解再做一遍。</li><li>第二天再做一遍。</li><li>一个星期之后再做一遍。</li><li>面试的前一个星期再做一遍。</li></ul><p><strong>五遍刷题法</strong>的核心思想在于过遍数，你一天刷个几百遍是没有用的，要每隔一段时间就刷一遍。 因为这是符合人类的遗忘曲线的，也叫做“艾宾浩斯记忆曲线”。</p><p><strong>刷题最大误区</strong></p><ul><li>刷题只刷一遍。刷一遍是远远不够的。</li><li>我要自己想出题目的解法。很多题目你要是能自己想出来的话， 你都可以拿图灵奖了，醒醒吧少年。</li></ul><p>估计有的同学对于这个观点不是很赞同。自己以前一直都是想要自己去想题目的解决方法， 结果可想而知，自然是碰到了很多的困难和挫折。 因为很多的算法，比如 KMP，你要是能自己想出来，简直逆天了都。 所以学算法的第一步就是要先清楚的给自己划定一条边界： 你是要学习算法而不是要去发明创造一个新的算法。其实也很容易理解， 你要是没有学习过加减乘除，让你自己去发明加减乘除，试问又有几个人能够办到。 我们更多的时候，是站在前人的基础上。牛顿曾说过:</p><p>“我之所以能成功，是因为我站在巨人的肩膀上”</p><p>所以对于我们普通人而言，你更多的是需要认真学习。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
